{"version":3,"file":"render.global.js","sources":["../src/render.ts"],"sourcesContent":["import { fabric } from \"fabric\";\r\n\r\n\r\nexport class Table {\r\n  private canvas: fabric.StaticCanvas;\r\n  private cellWidth: number;\r\n  private cellHeight: number;\r\n  private row: number;\r\n  private col: number;\r\n  private cellLines = [];\r\n  private mergeCellRects = [];\r\n  private cellTexts = [];\r\n  constructor(row: number, col: number, container: string) {\r\n    this.canvas = new fabric.StaticCanvas(container);\r\n    this.cellWidth = 120;\r\n    this.cellHeight = 40;\r\n    this.row = row;\r\n    this.col = col;\r\n  }\r\n\r\n  public initMaskTable() {\r\n    const totalHeight = this.row * this.cellHeight;\r\n    const totalWidth = this.col * this.cellWidth;\r\n    for (let i = 0; i <= this.row; i++) {\r\n      let horizontalLine = new fabric.Line(\r\n        [0, i * this.cellHeight, totalWidth, i * this.cellHeight],\r\n        {\r\n          stroke: \"black\",\r\n          strokeWidth: 1,\r\n        }\r\n      );\r\n      this.cellLines.push(horizontalLine);\r\n    }\r\n\r\n    // 使用另一个for循环创建列线条\r\n    for (let j = 0; j <= this.col; j++) {\r\n      var verticalLine = new fabric.Line(\r\n        [j * this.cellWidth, 0, j * this.cellWidth, totalHeight],\r\n        {\r\n          stroke: \"black\",\r\n          strokeWidth: 1,\r\n        }\r\n      );\r\n      this.cellLines.push(verticalLine);\r\n    }\r\n    return this;\r\n  }\r\n\r\n\r\n\r\n  public mergeCells(\r\n    startRow: number,\r\n    startCol: number,\r\n    endRow: number,\r\n    endCol: number\r\n  ) :Table{\r\n    // 计算矩形的位置和大小\r\n    const left = startCol * this.cellWidth;\r\n    const top = startRow * this.cellHeight;\r\n    const width = (endCol - startCol + 1) * this.cellWidth;\r\n    const height = (endRow - startRow + 1) * this.cellHeight;\r\n\r\n    // 创建一个矩形\r\n    const rect = new fabric.Rect({\r\n      left: left,\r\n      top: top,\r\n      width: width,\r\n      height: height,\r\n      fill: \"white\",\r\n      stroke: \"black\",\r\n      strokeWidth: 1,\r\n    });\r\n    var text = new fabric.Textbox(\"Hello\", {\r\n      left: rect.left,\r\n      top: rect.top,\r\n      width: rect.width,\r\n      height: rect.height,\r\n      fill: \"black\",\r\n      lockMovementX: true,\r\n      lockMovementY: true,\r\n    });\r\n    this.cellTexts.push(text);\r\n    this.mergeCellRects.push(rect);\r\n    return this;\r\n  }\r\n\r\n  public render() {\r\n    console.log(this.cellLines, this.mergeCellRects, this.cellTexts);\r\n    \r\n    this.canvas.add.apply(this.canvas, [...this.cellLines,...this.mergeCellRects,...this.cellTexts]);\r\n  }\r\n}\r\n\r\nexport function initMaskTable(row: number, col: number, container: string) {\r\n  // 初始化fabric.Canvas对象\r\n  const canvas = new fabric.StaticCanvas(\"container\");\r\n  // 计算每个单元格的宽度和高度\r\n  const cellWidth = 120;\r\n  const cellHeight = 40;\r\n\r\n  const totalHeight = row * cellHeight;\r\n  const totalWidth = col * cellWidth;\r\n  // 使用for循环创建行线条\r\n  const lines: any[] = [];\r\n  for (let i = 0; i <= row; i++) {\r\n    let horizontalLine = new fabric.Line(\r\n      [0, i * cellHeight, totalWidth, i * cellHeight],\r\n      {\r\n        stroke: \"black\",\r\n        strokeWidth: 1,\r\n      }\r\n    );\r\n    lines.push(horizontalLine);\r\n  }\r\n\r\n  // 使用另一个for循环创建列线条\r\n  for (let j = 0; j <= col; j++) {\r\n    var verticalLine = new fabric.Line(\r\n      [j * cellWidth, 0, j * cellWidth, totalHeight],\r\n      {\r\n        stroke: \"black\",\r\n        strokeWidth: 1,\r\n      }\r\n    );\r\n    lines.push(verticalLine);\r\n  }\r\n  return function render() {\r\n    canvas.add.apply(canvas, lines);\r\n  };\r\n}\r\n\r\nexport function mergeCells(\r\n  startRow: number,\r\n  startCol: number,\r\n  endRow: number,\r\n  endCol: number,\r\n  canvas: fabric.StaticCanvas,\r\n  cellWidth: number,\r\n  cellHeight: number\r\n) {\r\n  // 计算矩形的位置和大小\r\n  const left = startCol * cellWidth;\r\n  const top = startRow * cellHeight;\r\n  const width = (endCol - startCol + 1) * cellWidth;\r\n  const height = (endRow - startRow + 1) * cellHeight;\r\n\r\n  // 创建一个矩形\r\n  const rect = new fabric.Rect({\r\n    left: left,\r\n    top: top,\r\n    width: width,\r\n    height: height,\r\n    fill: \"white\",\r\n    stroke: \"black\",\r\n    strokeWidth: 1,\r\n  });\r\n  var text = new fabric.Textbox(\"Hello\", {\r\n    left: rect.left,\r\n    top: rect.top,\r\n    width: rect.width,\r\n    height: rect.height,\r\n    fill: \"black\",\r\n    lockMovementX: true,\r\n    lockMovementY: true,\r\n    lockScalingX: true,\r\n    lockScalingY: true,\r\n    splitByGrapheme: true,\r\n  });\r\n\r\n  canvas.add(text);\r\n  // 添加矩形到画布\r\n  canvas.add(rect);\r\n}\r\n"],"names":["fabric"],"mappings":"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"}