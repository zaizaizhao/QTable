{"version":3,"file":"render.cjs.js","sources":["../src/shared/draw.ts","../src/utils/mergeCells.ts","../src/render/render.ts"],"sourcesContent":["import { fabric } from \"fabric\";\r\nimport { ILineOptions, IRectOptions } from \"fabric/fabric-impl\";\r\n\r\nexport type StaticCanvas = fabric.StaticCanvas;\r\nexport type Canvas = fabric.Canvas;\r\nexport type Group = fabric.Group;\r\nexport type Rect = fabric.Rect;\r\nexport type Line = fabric.Line;\r\nexport type Text = fabric.Text;\r\nexport type Textbox = fabric.Textbox;\r\n\r\n\r\nexport function createStaticCanvas(container): fabric.StaticCanvas {\r\n    return new fabric.StaticCanvas(container);\r\n}\r\n\r\nexport function createCanvas(container): fabric.Canvas {\r\n    return new fabric.Canvas(container);\r\n}\r\n\r\nexport function createGroup(objects?: fabric.Object[] | undefined, options?: fabric.IGroupOptions | undefined, isAlreadyGrouped?: boolean | undefined): fabric.Group {\r\n    return new fabric.Group(objects,options,isAlreadyGrouped);\r\n}\r\n\r\n\r\nexport function createRect(options:IRectOptions): fabric.Rect {\r\n    return new fabric.Rect(options);\r\n}\r\n\r\nexport function createLine(points?: number[], objObjects?: ILineOptions): fabric.Line {\r\n    return new fabric.Line(points, objObjects);\r\n}\r\n\r\nexport function createText(text: string, options: fabric.ITextOptions): fabric.Text {\r\n    return new fabric.Text(text, options);\r\n}\r\n\r\nexport function createTextbox(text: string, options: fabric.ITextOptions): fabric.Textbox {\r\n    return new fabric.Textbox(text, options);\r\n}","import { createGroup, createRect, createTextbox } from \"../shared\";\r\n\r\nexport function mergeCell(cell:MergeCell, cellWidth, cellHeight) {\r\n    const { startRow, startCol, endRow, endCol } = cell;\r\n    const left = startCol * cellWidth;\r\n    const top = startRow * cellHeight;\r\n    const width = (endCol - startCol + 1) * cellWidth;\r\n    const height = (endRow - startRow + 1) * cellHeight;\r\n\r\n    const rect = createRect({\r\n      left: left,\r\n      top: top,\r\n      width: width,\r\n      height: height,\r\n      fill: \"white\",\r\n      stroke: \"black\",\r\n      strokeWidth: 1,\r\n    });\r\n\r\n    const text = createTextbox(\"Hello\", {\r\n      left: rect.left,\r\n      top: rect.top,\r\n      width: rect.width,\r\n      height: rect.height,\r\n      fill: \"black\",\r\n      lockMovementX: true,\r\n      lockMovementY: true,\r\n    });\r\n    const group = createGroup([rect, text]);\r\n    return group;\r\n  }\r\n  type MergeCell = {\r\n    startRow: number;\r\n    startCol: number;\r\n    endRow: number;\r\n    endCol: number;\r\n  };","import { fabric } from \"fabric\";\r\nimport {\r\n  createStaticCanvas,\r\n  createCanvas,\r\n  createGroup,\r\n  createRect,\r\n  createLine,\r\n  createText,\r\n  createTextbox,\r\n} from \"../shared\";\r\n\r\nimport type {\r\n  StaticCanvas,\r\n  Canvas,\r\n  Group,\r\n  Rect,\r\n  Line,\r\n  Text,\r\n  Textbox,\r\n} from \"../shared\";\r\nimport { mergeCell } from \"../utils\";\r\n\r\nexport class Table {\r\n  private canvas: Canvas;\r\n  private cellWidth: number;\r\n  private cellHeight: number;\r\n  private row: number;\r\n  private col: number;\r\n  private cellLines: Line[] = [];\r\n  private mergeGroup: Group[] = [];\r\n  constructor(row: number, col: number, container: string) {\r\n    this.canvas = createCanvas(container);\r\n    this.cellWidth = 120;\r\n    this.cellHeight = 40;\r\n    this.row = row;\r\n    this.col = col;\r\n    this.canvas.selection = true;\r\n    // 监听 'selection:created' 和 'selection:updated' 事件\r\n    this.canvas.on(\"selection:created\", (e) => {\r\n      console.log(e);\r\n      \r\n      //@ts-ignore\r\n      e.target.set({ fill: \"#f00\" }); // 设置选中颜色\r\n      this.canvas.renderAll();\r\n    });\r\n\r\n    this.canvas.on(\"selection:updated\", (e) => {\r\n      console.log(e.target);\r\n      //@ts-ignore\r\n      e.target.set({ fill: \"#f00\" }); // 设置选中颜色\r\n      this.canvas.renderAll();\r\n    });\r\n\r\n    // 监听 'selection:cleared' 事件\r\n    this.canvas.on(\"selection:cleared\", (e) => {\r\n      //@ts-ignore\r\n      e.target.set({ fill: \"#fff\" }); // 设置未选中颜色\r\n      this.canvas.renderAll();\r\n    });\r\n  }\r\n\r\n  public initMaskTable() {\r\n    const totalHeight = this.row * this.cellHeight;\r\n    const totalWidth = this.col * this.cellWidth;\r\n    for (let i = 0; i <= this.row; i++) {\r\n      let horizontalLine = createLine(\r\n        [0, i * this.cellHeight, totalWidth, i * this.cellHeight],\r\n        {\r\n          stroke: \"black\",\r\n          strokeWidth: 1,\r\n        }\r\n      );\r\n      this.cellLines.push(horizontalLine);\r\n    }\r\n\r\n    for (let j = 0; j <= this.col; j++) {\r\n      var verticalLine = new fabric.Line(\r\n        [j * this.cellWidth, 0, j * this.cellWidth, totalHeight],\r\n        {\r\n          stroke: \"black\",\r\n          strokeWidth: 1,\r\n        }\r\n      );\r\n      this.cellLines.push(verticalLine);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  public mergeCells(mergeCells: MergeCell[]): Table {\r\n    mergeCells.forEach((cell) => {\r\n      const group = mergeCell(cell, this.cellWidth, this.cellHeight);\r\n      this.mergeGroup.push(group);\r\n    });\r\n    return this;\r\n  }\r\n\r\n  public render() {\r\n    this.canvas.add.apply(this.canvas, [...this.cellLines, ...this.mergeGroup]);\r\n    this.canvas.renderAll();\r\n  }\r\n}\r\n\r\ntype MergeCell = {\r\n  startRow: number;\r\n  startCol: number;\r\n  endRow: number;\r\n  endCol: number;\r\n};\r\n"],"names":["fabric"],"mappings":"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"}